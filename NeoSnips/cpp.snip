# for
snippet for_int
alias fori
abbr for ( int i )
options head
    for ( int ${1:i} = 0; $1 < ${2}; ++$1 )
    {
        ${0}
    }

# for each
snippet for_each
alias fore
abbr for ( i : thing )
options head
    for ( ${1:auto} ${2:var} : ${3:collection} )
    {
        ${0}
    }

# Code Review Comment
snippet //CRCdmd
alias //CRC 
options head
    // CRC_${1}: dmd: ${0}

snippet CRCdmd
alias CRC 
    CRC_${1}: dmd: ${0}
# TODO
snippet TODOdmd
alias TODO
options head
    // TODO_${1}: dmd: ${0}
# Do nothing
snippet DoNothing
alias Do
options head
    // Do nothing

# Debug
snippet DBGdmd
alias DBG
options head
    qDebug()<<"DBG: dmd: ${0}";

snippet toString
options head
    qDebug()<<"DBG: dmd: $0"<<core::ToString::toString(${0});

snippet coreDBG
alias coreDBG
options head
    core::debug()<<"DBG: dmd: ${0}";

snippet class
options head
    #pragma once

    namespace altair {
    namespace feko {
    namespace ${1:`expand("%:h:t")`} {
    
    class ${2:`toupper(expand("%:h:t"))`_EXPORT} ${3:`expand("%:t:r")`}
    {
    public: 
        $3(${4});
        virtual ~$3();

    	${0}
    private:
    
    };

    } // end namespace $1
    } // end namespace feko
    } // end namespace altair

snippet test
options head
    #include "unitdoc/unitdoc.h"

    #include "${1:`expand("%:t:r:r")`}.h"

    using namespace altair::feko;

    UD_CLASS($1, "${2}")
    {
        ${0}
    }

    UD_METHOD($1, $1, "${3}")
    {
    }

snippet cpp
options head
    #include "${1:`expand("%:h:h:t")`}/${2:`expand("%:t:r")`}.h"

    namespace altair {
    namespace feko {
    namespace $1 {

    ${3:// ----- STATICS -----}

    // ----- CONSTRUCTOR & DESTRUCTOR -----
    $2::$2(${4})
    {
    }

    $2::~$2(${5})
    {
    }

    // ----- PUBLIC METHODS -----

    ${0}

    // ----- PROTECTED METHODS -----

    // ----- PRIVATE METHODS -----

    } // end namespace $1
    } // end namespace feko
    } // end namespace altair

snippet method
options head
    ${1:void} ${2:`expand("%:t:r")`}::${3}(${0})
    {
    }
